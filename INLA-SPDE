#Variable standardization
require(readxl)
data1 <- read_excel("C:/ ")
data1$var1<-scale(data1$var1,center = T,scale=T)
data1$var2<-scale(data1$var2,center = T,scale = T)
data1$var3<-scale(data1$var3,center = T,scale=T)
data1$varn<-scale(data1$varn,center = T,scale=T)
write.table (data1, file ="C:/ .csv",quote = F,sep=',')

#Univariate model
library(lme4)
library(MASS)
mod<-glm.nb(incident_cases~offset(log(population))+var1,data=data1)

#Multicollinearity test
#Correlation analysis
library(corrplot)
tdc<-cor(data2, method="pearson") #data2 represents statistically significant variables.
testRes = cor.mtest(data2, method="pearson",conf.level = 0.95)
par(mar=c(5, 4, 4, 2) + 0.1)
corrplot(tdc, method = "color",
         tl.col = "black", tl.cex = 0.8, tl.srt = 45,tl.pos = "lt",
         p.mat =testRes$p , diag = T, type = 'upper',
         sig.level = c(0.001, 0.01, 0.05), pch.cex = 0.8,
         insig = 'label_sig', pch.col = 'grey20', order = 'AOE')
corrplot(tdc, method = "number", type = "lower", 
         tl.col = "n", tl.cex = 0.1, tl.pos = "n",order = 'AOE',number.cex = 0.5,
         add = T)
#Variance Inflation Factor
mod1<-glm.nb(incident_cases~offset(log(population))+var1+var2+varn,data=data1)
library(car)

#Stepwise regression
mod2=glm.nb(incident_cases~offset(log(population)),data=data1)
biggest<-glm.nb(incident_cases~offset(log(population))+var1+var2+varn,data=data1)
summary(biggest)
step(mod2,direction="both",scope = biggest)
fit<-step(biggest)

#INLA-SPDE
require(rgdal)
require(readxl)
library(INLA)
library(gstat)
library(sf)
library(raster)
Point_Data <- read_excel("C:/ .xlsx") #cancer registration data
dim(Point_Data)
china<- readOGR("C:/.shp") #Base map
Loc <- cbind(Point_Data$Lon, Point_Data$Lat)
Point <- SpatialPointsDataFrame(coords = Loc, data = Point_Data, match.ID = T,
                                proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs"))
par(mfrow = c(1,1), mar = c(0,0,0,0))
plot(Point, col = 2, pch = 16, cex = 0.7)
#Semivariogram
coordinates(Point_Data) = ~Lat+Lon
plot(variogram(incidence~1,Point_Data))
H<-variogram(incidence~1,Point_Data)
plot(H, plot.line = TRUE)
m <- fit.variogram(H,vgm(,"Sph",,))
plot(H, model=m)
range_parameter <- m$range
range_parameter
#Establishment of mesh grid
library(sf)
boundary_shape <- st_read("C:/.shp") #National boundaries
boundary_coords <- st_coordinates(boundary_shape)
Mesh1 <- inla.mesh.2d(Loc,offset=c(,),boundary = boundary_coords,
                      max.edge = c(,),
                      cutoff = )
par(mfrow = c(2,2), mar = c(1,1,1,1))
plot(Mesh1,asp = 1, main = "Mesh1")
points(Loc, col = 2, pch = 16, cex = 0.5)

Mesh2 <- inla.mesh.2d(Loc,boundary = boundary_coords,offset=c(,),
                      max.edge = c(,),
                      cutoff = )
plot(Mesh2,asp = 1, main = "")
points(Loc, col = 2, pch = 16, cex = 0.5)
Mesh3 <- inla.mesh.2d(Loc,boundary = boundary_coords,offset = c(,),
                      max.edge = c(,),
                      cutoff = )
plot(Mesh3,asp = 1, main = "")
points(Loc, col = 2, pch = 16, cex = 0.5)
Mesh4 <- inla.mesh.2d(Loc,boundary = boundary_coords,offset = c(,),
                      max.edge = c(,),
                      cutoff = 
                      )
plot(Mesh4,asp = 1, main = "")
points(Loc, col = 2, pch = 16, cex = 0.5)

par(mfrow = c(1,1), mar = c(1,1,1,1))
plot(Mesh2,asp = 1, main = "")
points(Point, col = 2, pch = 16, cex = 0.7)
#Weight matrix
A_point <- inla.spde.make.A(Mesh2, loc = Loc)
dim (A_point)
#Prior
spde.pc   <- inla.spde2.pcmatern(Mesh2,                      
                                 prior.range = c(0.1,0.1),  
                                 prior.sigma = c(10,0.1))
s.index=inla.spde.make.index(name="w",
                             n.spde = spde.pc$n.spde)
str(s.index)
#Establish a stack
Xpopulation<- model.matrix(~ -1 + population, data = Point_Data)
Xp=data.frame(population=Xpopulation[,1])
N=nrow(Point_Data)
N
Xvar1<- model.matrix(~ -1 + var1, data = Point_Data)
Xv1=data.frame(var1=Xvar1[,1])
N=nrow(Point_Data)
N
Xvar2 <- model.matrix(~ -1 + var2, data = Point_Data)
Xv2=data.frame(var2=Xvar2[,1])
N=nrow(Point_Data)
N
Xvarn <- model.matrix(~ -1 + varn, data = Point_Data)
Xvn=data.frame(varn=Xvarn[,1])
N=nrow(Point_Data)
N
XID<-model.matrix(~ -1 + ID, data = Point_Data)
Xid=data.frame(ID=XID[,1])
N=nrow(Point_Data)
N

stack.test=inla.stack(tag="test",
                      data=list(y=Point_Data$incident_cases),
                      A = list(1,1,1,1,1,1,A_point),
                      effects= list(
                        Intercept = rep(1, N),
                        Xp=Xpopulation,
                        Xv1=Xvar1,
                        Xv2=Xvar2,
                        Xvn=Xvarn,
                        Xid=XID,
                        w = s.index))
dim(inla.stack.A(stack.test))

formula2 = y ~ -1+Intercept+offset(log(Xp))+f(w, model = spde)+f(Xid,model = "iid")+Xv1+Xv2+Xvn
Mod_Point2 <- inla(formula2,
                   data = inla.stack.data(stack.test, spde=spde.pc),
                   family="poisson",
                   control.compute = list(dic=TRUE, cpo=TRUE, waic=TRUE),
                   control.predictor = list(A = inla.stack.A(stack.test),
                                            compute = T))
summary(Mod_Point2)

#Estimate for all districts and counties nationwide
library(raster)
library(sp)
library(rgdal)
china<- readOGR("C:/.shp") #Base map with correlated variables
r = raster(china, res=0.04) 
#Feature to raster
shape_r = rasterize(china, r,"population")
plot(shape_r)
plot(china,add=T)
shape_r2 = rasterize(china,r,"ID")
plot(shape_r2)
plot(china,add=T)
shape_r3 = rasterize(china,r,"var1")
plot(shape_r3)
plot(china,add=T)
shape_r4 = rasterize(china,r,"var2")
plot(shape_r4)
plot(china,add=T)
shape_r5 = rasterize(china,r,"varn")
plot(shape_r5)
#Raster to point conversion
dp <- rasterToPoints(shape_r)
dim(dp)
dp2<-rasterToPoints(shape_r2)
dim(dp2)
dp3<-rasterToPoints(shape_r3)
dim(dp3)
dp4<-rasterToPoints(shape_r4)
dim(dp4)
dp5<-rasterToPoints(shape_r5)
dim(dp5)
#XY coordinates of raster cell centroids
coop <- dp[, c("x", "y")]

Ap <- inla.spde.make.A(mesh = Mesh2, loc = coop)
# stack for estimation stk.e
stk.e <- inla.stack(
  tag = "est",
  data = list(y = Point_Data$incident_cases),
  A = list(1,A_point),
  effects = list(data.frame(Intercept= rep(1,483),  population=Point_Data$population,ID=Point_Data$ID,var1=Point_Data$var1,var2=Point_Data$var2,varn=Point_Data$varn), w = s.index))

# stack for prediction stk.p
stk.p <- inla.stack(
  tag = "pred",
  data = list(y = NA),
  A = list(1, Ap),
  effects = list(data.frame(Intercept= rep(1,599225), population = dp[, 3],ID=dp2[,3],var1=dp3[,3],var2=dp4[,3],varn=dp5[,3]),w = s.index ))

stk.full <- inla.stack(stk.e, stk.p)
#Model
formula1 <- y ~ -1 +offset(log(population))+ Intercept+f(w, model = spde.pc)+f(ID,model = "iid")+var1+var2+varn
res <-inla(formula1,
            family = "poisson",
            data = inla.stack.data(stk.full),
            control.compute = list(dic=TRUE, cpo=TRUE, waic=TRUE),
            control.predictor = list(
              compute = TRUE, link = 1,
              A = inla.stack.A(stk.full)))
summary(res)

index <- inla.stack.index(stack = stk.full, tag = "pred")$data
prev_mean <- res$summary.fitted.values[index, "mean"]
prev_sd<-res$summary.fitted.values[index,"sd"]
prev_ll <- res$summary.fitted.values[index, "0.025quant"]
prev_ul <- res$summary.fitted.values[index, "0.975quant"]

#Generate a predictive map
library(ncdf4)
library(raster)
library(leaflet)
pal <- colorNumeric("viridis", c(0, 1), na.color = "transparent")

dpm <- rbind(
  data.frame(
    east = coop[, 1], north = coop[, 2],
    value = prev_mean, variable = "prev_mean"
  ),
  data.frame(
    east = coop[, 1], north = coop[, 2],
    value = prev_ll, variable = "prev_ll"
  ),
  data.frame(
    east = coop[, 1], north = coop[, 2],
    value = prev_ul, variable = "prev_ul"
  )
)
library(ggplot2)
incidence<-ggplot(dpm) + geom_tile(aes(east, north, fill = value)) +
  facet_wrap(~variable, nrow = 1) +
  coord_fixed(ratio = 1) +
  scale_fill_gradient(
    name = "incidence",
    low = "blue", high = "orange"
  ) +
  theme_bw()

plot(incidence)
library(data.table)
fwrite(dpm, file = "C:/.csv") #Export the data

#Sensitivity analysis
range_params <- c(0.05, 0.1, 0.2, 0.5, 1,1.5,2,3,4,5)
sigma_params <- c(0.1, 0.5, 1, 2, 4,6,7,8,9,10) 
for(i in seq(nrow(results))){
  range_val <- results$range[i]
  sigma_val <- results$sigma[i]
  
  spde_model <- inla.spde2.pcmatern(Mesh1, 
                                    prior.range = c(range_val, 0.1), 
                                    prior.sigma = c(sigma_val, 0.1))
  
  # Defining the model formula
  formula2 = y ~ -1+offset(log(Xp))+Intercept+f(w, model = spde)+f(Xid,model = "iid")+Xv1+Xv2+Xvn
  
  # Fitting an INLA-SPDE model
  fit <- inla(formula2,
              data = inla.stack.data(stack.test, spde=spde_model),
              family="poisson",
              control.compute = list(dic=TRUE, cpo=TRUE, waic=TRUE),
              control.predictor = list(A = inla.stack.A(stack.test),
                                       compute = T))
  # Saving the model results
  results$DIC[i] <- fit$dic
}
print(results)
results$DIC<-as.numeric(results$DIC)
write.table (results, file ="C:/.csv",quote = F,sep=',')

#Cross-validation
Point_Data<-data.frame(Point_Data)
fold_indices <- sample(rep(1:5, length.out = nrow(Point_Data)))
cv_results <- vector("list", 5)
cv_test<-vector("list", 5)
cv_rmse<-vector("list", 5)
cv_me<-vector("list", 5)
cv_mse<-vector("list", 5)
cv_cover<-vector("list", 5)
for(i in 1:5){
train_data <- Point_Data[fold_indices != i, ]
test_data <- Point_Data[fold_indices == i, ]
MeshPred <- inla.mesh.2d(Loc, offset = c(, ),
                         max.edge = c(,),
                         cutoff = )
spde.pred <- inla.spde2.pcmatern(MeshPred,                      
                                 prior.range = c(0.1,0.1),  
                                 prior.sigma = c(10,0.1))
s.index.p <- inla.spde.make.index(name = "sp.field.pred",
                                  n.spde = spde.pred$n.spde)
Locy<- cbind(train_data$Lon, train_data$Lat)
A_est  <- inla.spde.make.A(mesh = MeshPred,loc=Locy)
Locyt<- cbind(test_data$Lon, test_data$Lat)
A_pred <- inla.spde.make.A(mesh = MeshPred,loc=Locyt)
N=nrow(train_data)
M=nrow(test_data)
StackEst <- inla.stack( tag = "Est",
  data = list(y = train_data$incident_cases),
                       A = list(1,1,1,1,1,A_est),
                       effects = list(Intercept=rep(1,N),
                                      population = train_data$population,
                                           var1=train_data$var1,
                                           var2=train_data$var2,
                                           varn=train_data$varn,
                                           ID=train_data$ID,
                                           sp.field.pred=s.index.p))

stackPred <- inla.stack(tag = "Pred",
  data = list(y = NA),  # NAs in the response variable  
                        A = list(1,1,1,1,1,A_pred),
                        effects = list(Intercept=rep(1,M),
                                       population = test_data$population,
                                       var1=test_data$var1,
                                       var2=test_data$var2,
                                       varn=test_data$varn,
                                       ID=test_data$ID,
                                       sp.field.pred=s.index.p))

StackJoin <- inla.stack(StackEst, stackPred)
formula_Pred <- y ~ -1 +offset(log(population))+Intercept+var1+var2+varn+
  f(ID, model = "iid") +
  f(sp.field.pred, model = spde.pred)
Mod_Pred <-  inla(formula_Pred,
                  data = inla.stack.data(StackJoin, spde = spde.pred),
                  family = "poisson",
                  control.predictor = list(A = inla.stack.A(StackJoin),
                                           compute = T,link = 1))

index.pred <- inla.stack.index(StackJoin, "Pred")$data
post.mean.pred <- Mod_Pred$summary.fitted.values[index.pred, "mean"]
post.sd.pred<-Mod_Pred$summary.fitted.values[index.pred, "sd"]
#we calculate the actual coverage probability of a prediction interval with nominal coverage probability 95%
validation = list()
validation$res = test_data$inc1- post.mean.pred
validation$res.std = validation$res /
  sqrt(post.sd.pred^2 + 1/Mod_Pred$summary.hyperpar[1,"mean"])
validation$p = pnorm(validation$res.std)
validation$cover = mean((validation$p>0.025) & (validation$p<0.975), na.rm=TRUE)
cv_cover[[i]]<-validation$cover
rmse<-sqrt(mean(validation$res^2, na.rm=TRUE))
me<-mean(post.mean.pred - test_data$inc1)
mse<-mean((post.mean.pred - test_data$inc1)^2)
cv_results[[i]] <- post.mean.pred
cv_test[[i]]<-test_data$inc
cv_rmse[[i]]<-rmse
cv_me[[i]]<-me
cv_mse[[i]]<-mse
}
