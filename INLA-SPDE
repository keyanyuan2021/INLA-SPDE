#Example
library(readxl)
data<-read_excel("cancer registration.xlsx")
#Variable standardization
data$GDP<-scale(data$GDP,center = T,scale=T)
data$Education<-scale(data$Education,center = T,scale=T)
#Univariate model
library(lme4)
library(MASS)
mod1<-glm.nb(Cases~offset(log(Population))+GDP,data=data)
mod2<-glm.nb(Cases~offset(log(Population))+Education,data=data)

#Multicollinearity test
#Correlation analysis
library(corrplot)
data2<-data[,-c(1:6)]#Only covariate data is retained
tdc<-cor(data2, method="pearson") #data2 represents statistically significant variables.
testRes = cor.mtest(data2, method="pearson",conf.level = 0.95)
par(mar=c(5, 4, 4, 2) + 0.1)
corrplot(tdc, method = "color",
         tl.col = "black", tl.cex = 0.8, tl.srt = 45,tl.pos = "lt",
         p.mat =testRes$p , diag = T, type = 'upper',
         sig.level = c(0.001, 0.01, 0.05), pch.cex = 0.8,
         insig = 'label_sig', pch.col = 'grey20', order = 'AOE')
corrplot(tdc, method = "number", type = "lower", 
         tl.col = "n", tl.cex = 0.1, tl.pos = "n",order = 'AOE',number.cex = 0.5,
         add = T)
#Variance Inflation Factor
library(car)
mod3<-glm.nb(Cases~offset(log(Population))+GDP+Education,data=data)
vif(mod3)

#Stepwise regression
mod4=glm.nb(Cases~offset(log(Population)),data=data)
biggest<-glm.nb(Cases~offset(log(Population))+GDP+Education,data=data)#Add variables that pass the multicollinearity test
summary(biggest)
step(mod4,direction="both",scope = biggest)
fit<-step(biggest)

#INLA-SPDE
#Load the program package
require(rgdal)
library(INLA) 
library(gstat)
library(sf)
library(raster)
# Loading data
Point_Data<-data
Map<- readOGR("my_points.shp") #Base map
Loc <- cbind(Point_Data$Lon, Point_Data$Lat)
Point <- SpatialPointsDataFrame(coords = Loc, data = Point_Data, match.ID = T,
                                proj4string = CRS("+proj=longlat +datum=WGS84 +no_defs"))
par(mfrow = c(1,1), mar = c(0,0,0,0))
plot(Point, col = 2, pch = 16, cex = 1)

#Semivariogram
coordinates(Point_Data) = ~Lat+Lon
plot(variogram(Incidence~1,Point_Data))
H<-variogram(Incidence~1,Point_Data)
plot(H, plot.line = TRUE)
m <- fit.variogram(H,vgm(,"Exp",,))
plot(H, model=m)
range_parameter <- m$range
range_parameter

#Establishment of mesh grid
library(sf)
Mesh1 <- inla.mesh.2d(Loc,offset=c(1,2),
                      max.edge = c(1,2),
                      cutoff = 0.5)
par(mfrow = c(2,2), mar = c(1,1,1,1))
plot(Mesh1,asp = 1, main = "Mesh1")
points(Loc, col = 2, pch = 16, cex = 1)

Mesh2 <- inla.mesh.2d(Loc,offset=c(1,2),
                      max.edge = c(1,3),
                      cutoff = 0.7)
plot(Mesh2,asp = 1, main = "")
points(Loc, col = 2, pch = 16, cex = 1)
Mesh3 <- inla.mesh.2d(Loc,offset = c(1,2),
                      max.edge = c(1,2),
                      cutoff = 1)
plot(Mesh3,asp = 1, main = "")
points(Loc, col = 2, pch = 16, cex = 1)

par(mfrow = c(1,1), mar = c(1,1,1,1))
plot(Mesh2,asp = 1, main = "")
points(Point, col = 2, pch = 16, cex = 1)

#Weight matrix
A_point <- inla.spde.make.A(Mesh2, loc = Loc)
dim (A_point)
#Prior
spde.pc   <- inla.spde2.pcmatern(Mesh2,                      
                                 prior.range = c(0.1,0.1),  
                                 prior.sigma = c(5,0.1))
s.index=inla.spde.make.index(name="w",
                             n.spde = spde.pc$n.spde)
str(s.index)
#Establish a stack
Xpopulation<- model.matrix(~ -1 + Population, data = Point_Data)
Xp=data.frame(Population=Xpopulation[,1])
N=nrow(Point_Data)
N
XGDP<- model.matrix(~ -1 + GDP, data = Point_Data)
XG=data.frame(GDP=XGDP[,1])
N=nrow(Point_Data)
N
Xedu<- model.matrix(~ -1 + Education, data = Point_Data)
Xe=data.frame(Education=Xedu[,1])
N=nrow(Point_Data)
N
XID<-model.matrix(~ -1 + ID, data = Point_Data)
Xid=data.frame(ID=XID[,1])
N=nrow(Point_Data)
N

stack.test=inla.stack(tag="test",
                      data=list(y=Point_Data$Cases),
                      A = list(1,1,1,1,1,A_point),
                      effects= list(
                        Intercept = rep(1, N),
                        Xp=Xpopulation,
                        XG=XGDP,
                        Xe=Xedu,
                        Xid=XID,
                        w = s.index))
dim(inla.stack.A(stack.test))

formula2 = y ~ -1+Intercept+offset(log(Xp))+f(w, model = spde)+f(Xid,model = "iid")+XG+Xe
Mod_Point2 <- inla(formula2,
                   data = inla.stack.data(stack.test, spde=spde.pc),
                   family="poisson",
                   control.compute = list(dic=TRUE, cpo=TRUE, waic=TRUE),
                   control.predictor = list(A = inla.stack.A(stack.test),
                                            compute = T))
summary(Mod_Point2)

##Estimate for all districts and counties nationwide
library(raster)
library(sp)
library(rgdal)
Map<- readOGR("my_points.shp") #Base map with correlated variables
r = raster(Map, res=0.05) 
#Feature to raster
shape_r = rasterize(Map, r,"Population")
plot(shape_r)
plot(Map,add=T)
shape_r2 = rasterize(Map,r,"ID_1")
plot(shape_r2)
plot(Map,add=T)
shape_r3 = rasterize(Map,r,"GDP")
plot(shape_r3)
plot(Map,add=T)
shape_r4 = rasterize(Map,r,"Education")
plot(shape_r4)
plot(Map,add=T)

#Raster to point conversion
dp <- rasterToPoints(shape_r)
dim(dp)
dp2<-rasterToPoints(shape_r2)
dim(dp2)
dp3<-rasterToPoints(shape_r3)
dim(dp3)
dp4<-rasterToPoints(shape_r4)
dim(dp4)

#XY coordinates of raster cell centroids
coop <- dp[, c("x", "y")]

Ap <- inla.spde.make.A(mesh = Mesh2, loc = coop)
# stack for estimation stk.e
stk.e <- inla.stack(
  tag = "est",
  data = list(y = Point_Data$Cases),
  A = list(1,A_point),
  effects = list(data.frame(Intercept= rep(1,50),  population=Point_Data$Population,ID=Point_Data$ID,GDP=Point_Data$GDP,edu=Point_Data$Education), w = s.index))
# stack for prediction stk.p
stk.p <- inla.stack(
  tag = "pred",
  data = list(y = NA),
  A = list(1, Ap),
  effects = list(data.frame(Intercept= rep(1,100), population = dp[, 3],ID=dp2[,3],GDP=dp3[,3],edu=dp4[,3]),w = s.index ))

stk.full <- inla.stack(stk.e, stk.p)
#Model
formula1 <- y ~ -1 +offset(log(population))+ Intercept+f(w, model = spde.pc)+f(ID,model = "iid")+GDP+edu
res <-inla(formula1,
           family = "poisson",
           data = inla.stack.data(stk.full),
           control.compute = list(dic=TRUE, cpo=TRUE, waic=TRUE),
           control.predictor = list(
             compute = TRUE, link = 1,
             A = inla.stack.A(stk.full)))
summary(res)

index <- inla.stack.index(stack = stk.full, tag = "pred")$data
prev_mean <- res$summary.fitted.values[index, "mean"]
prev_sd<-res$summary.fitted.values[index,"sd"]
prev_ll <- res$summary.fitted.values[index, "0.025quant"]
prev_ul <- res$summary.fitted.values[index, "0.975quant"]

#Generate a predictive map
library(ncdf4)
library(raster)
library(leaflet)
pal <- colorNumeric("viridis", c(0, 1), na.color = "transparent")

dpm <- rbind(
  data.frame(
    east = coop[, 1], north = coop[, 2],
    value = prev_mean, variable = "prev_mean"
  ),
  data.frame(
    east = coop[, 1], north = coop[, 2],
    value = prev_ll, variable = "prev_ll"
  ),
  data.frame(
    east = coop[, 1], north = coop[, 2],
    value = prev_ul, variable = "prev_ul"
  )
)
library(ggplot2)
incidence<-ggplot(dpm) + geom_tile(aes(east, north, fill = value)) +
  facet_wrap(~variable, nrow = 1) +
  coord_fixed(ratio = 1) +
  scale_fill_gradient(
    name = "incidence",
    low = "blue", high = "orange"
  ) +
  theme_bw()
plot(incidence)

#Sensitivity analysis
range_params <- c(0.05, 0.1, 0.2, 0.5, 1)
sigma_params <- c(0.1, 0.5, 1, 2, 5) 
results <- expand.grid(range=range_params, sigma=sigma_params)
for(i in seq(nrow(results))){
  range_val <- results$range[i]
  sigma_val <- results$sigma[i]
  
  spde_model <- inla.spde2.pcmatern(Mesh2, 
                                    prior.range = c(range_val, 0.1), 
                                    prior.sigma = c(sigma_val, 0.1))
  
  # Defining the model formula
  formula2 = y ~ -1+offset(log(Xp))+Intercept+f(w, model = spde)+f(Xid,model = "iid")+XG+Xe
  
  # Fitting an INLA-SPDE model
  fit <- inla(formula2,
              data = inla.stack.data(stack.test, spde=spde_model),
              family="poisson",
              control.compute = list(dic=TRUE, cpo=TRUE, waic=TRUE),
              control.predictor = list(A = inla.stack.A(stack.test),
                                       compute = T))
  # Saving the model results
  results$DIC[i] <- fit$dic
}
print(results)
results$DIC<-as.numeric(results$DIC)
write.table (results, file ="C:/.csv",quote = F,sep=',')

#Cross-validation
Point_Data<-data.frame(Point_Data)
fold_indices <- sample(rep(1:5, length.out = nrow(Point_Data)))
cv_results <- vector("list", 5)
cv_test<-vector("list", 5)
cv_rmse<-vector("list", 5)
cv_me<-vector("list", 5)
cv_mse<-vector("list", 5)
cv_cover<-vector("list", 5)
for(i in 1:5){
  train_data <- Point_Data[fold_indices != i, ]
  test_data <- Point_Data[fold_indices == i, ]
  MeshPred <- inla.mesh.2d(Loc, offset = c(1,2),
                           max.edge = c(1,3),
                           cutoff = 0.7 )
  spde.pred <- inla.spde2.pcmatern(MeshPred,                      
                                   prior.range = c(0.1,0.1),  
                                   prior.sigma = c(1,0.1))
  s.index.p <- inla.spde.make.index(name = "sp.field.pred",
                                    n.spde = spde.pred$n.spde)
  Locy<- cbind(train_data$Lon, train_data$Lat)
  A_est  <- inla.spde.make.A(mesh = MeshPred,loc=Locy)
  Locyt<- cbind(test_data$Lon, test_data$Lat)
  A_pred <- inla.spde.make.A(mesh = MeshPred,loc=Locyt)
  N=nrow(train_data)
  M=nrow(test_data)
  StackEst <- inla.stack( tag = "Est",
                          data = list(y = train_data$Cases),
                          A = list(1,1,1,1,1,A_est),
                          effects = list(Intercept=rep(1,N),
                                         population = train_data$Population,
                                         GDP=train_data$GDP,
                                         edu=train_data$Education,
                                         ID=train_data$ID,
                                         sp.field.pred=s.index.p))
  
  stackPred <- inla.stack(tag = "Pred",
                          data = list(y = NA),  # NAs in the response variable  
                          A = list(1,1,1,1,1,A_pred),
                          effects = list(Intercept=rep(1,M),
                                         population = test_data$Population,
                                         GDP=test_data$GDP,
                                         edu=test_data$Education,
                                         ID=test_data$ID,
                                         sp.field.pred=s.index.p))
  
  StackJoin <- inla.stack(StackEst, stackPred)
  formula_Pred <- y ~ -1 +offset(log(population))+Intercept+GDP+edu+
    f(ID, model = "iid") +
    f(sp.field.pred, model = spde.pred)
  Mod_Pred <-  inla(formula_Pred,
                    data = inla.stack.data(StackJoin, spde = spde.pred),
                    family = "poisson",
                    control.predictor = list(A = inla.stack.A(StackJoin),
                                             compute = T,link = 1))
  
  index.pred <- inla.stack.index(StackJoin, "Pred")$data
  post.mean.pred <- Mod_Pred$summary.fitted.values[index.pred, "mean"]
  post.sd.pred<-Mod_Pred$summary.fitted.values[index.pred, "sd"]
  #we calculate the actual coverage probability of a prediction interval with nominal coverage probability 95%
  validation = list()
  validation$res = test_data$Incidence- post.mean.pred
  validation$res.std = validation$res /
    sqrt(post.sd.pred^2 + 1/Mod_Pred$summary.hyperpar[1,"mean"])
  validation$p = pnorm(validation$res.std)
  validation$cover = mean((validation$p>0.025) & (validation$p<0.975), na.rm=TRUE)
  cv_cover[[i]]<-validation$cover
  rmse<-sqrt(mean(validation$res^2, na.rm=TRUE))
  me<-mean(post.mean.pred - test_data$Incidence)
  mse<-mean((post.mean.pred - test_data$Incidence)^2)
  cv_results[[i]] <- post.mean.pred
  cv_test[[i]]<-test_data$inc
  cv_rmse[[i]]<-rmse
  cv_me[[i]]<-me
  cv_mse[[i]]<-mse
}

# Corresponding SPSS statistical analyses converted into recognizable R code
# Define the Z-test function
data <- data.frame(
  n1 = c(100, 150, 200),  # Household-registered residents
  x1 = c(40, 60, 90),     # Incidence of the household-registered residents
  n2 = c(120, 180, 220),  # Permanent residents
  x2 = c(30, 70, 110)     # Incidence of the permanent residents
)

  p1 <- x1 / n1
  p2 <- x2 / n2
  p <- (x1 + x2) / (n1 + n2)
  SE <- sqrt(p * (1 - p) * (1 / n1 + 1 / n2))
  Z <- (p1 - p2) / SE
  p_value <- 2 * pnorm(-abs(Z))
  
  return(c(Z = Z, p_value = p_value))
}

# Apply the Z-test function to each row
results <- t(apply(data, 1, z_test))
results_df <- as.data.frame(results)

# Output
print(results_df)
